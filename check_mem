#!/usr/bin/env python

import argparse
import sys

def human_size(n):
    suffix = "KB"
    if (n > 1024):
        suffix = "MB"
        n = int(n / 1024)

    return str(n) + suffix

#######################################################################################
##  Parser
#######################################################################################
parser = argparse.ArgumentParser(description='Memory check plugin for Nagios / Icinga')

parser.add_argument('-c', '--critical', type=str, help='Critical threshold, default 90%%')
parser.add_argument('-w', '--warning', type=str, help='Warning threshold, default is 80%%')
parser.add_argument('-C', '--critical-swap', type=str, help='Critical threshold for swap, default 90%%')
parser.add_argument('-W', '--warning-swap', type=str, help='Warning threshold for swap, default is 80%%')
parser.add_argument('--critical-pagetable', type=str, help='Critical threshold for page table, default 20%%')
parser.add_argument('--warning-pagetable', type=str, help='Warning threshold for page table, default is 10%%')

args = parser.parse_args()

def parameter_cleanup(p, default_value):
    if (p is None):
        return default_value
    p = p.replace('%%', '')
    return float(p)

threshold_critical = parameter_cleanup(args.critical, 90)
threshold_warning = parameter_cleanup(args.warning, 80)

#######################################################################################

mem_total = None
mem_free = None
mem_avail = None
mem_pt = None
mem_buffers = None
mem_cached = None
swap_free = None
swap_total = None
result = 0

# Read the memory info
with open('/proc/meminfo') as f:
    lines = f.readlines()
    for line in lines:
       # Split the key / value
       line = line.replace(" ", "")
       item = line.split(":")
       name = item[0]
       value = item[1]
       value = value.replace("kB", "")
       value = float(value)
       if (name == "Buffers"):
           mem_buffers = value
       if (name == "Cached"):
           mem_cached = value
       if (name == "MemTotal"):
           mem_total = value
       if (name == "MemFree"):
           mem_free = value
       if (name == "MemAvailable"):
           mem_avail = value
       if (name == "PageTables"):
           mem_pt = value
       if (name == "SwapTotal"):
           swap_total = value
       if (name == "SwapFree"):
           swap_free = value

# On older kernels memory available is not in report, we need to workaround it
if (mem_avail is None):
    mem_avail = mem_free + mem_cached + mem_buffers

percentual_memory_used = int(100 - ((mem_avail / mem_total) * 100))

# Process thresholds
if (threshold_warning > 0 and threshold_warning <= percentual_memory_used):
    result = 1 

if (threshold_critical > 0 and threshold_critical <= percentual_memory_used):
    result = 2 

result_text = "[MEMORY] Total: " + human_size(mem_total) + " - Used: " + human_size(mem_total - mem_avail)

print(result_text)

sys.exit(result)
